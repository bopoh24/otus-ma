// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source service.go -destination ../../mocks/repository.go -package mock Repository
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/bopoh24/ma_1/customer/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRepository) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRepositoryMockRecorder) Close(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRepository)(nil).Close), ctx)
}

// CustomerByID mocks base method.
func (m *MockRepository) CustomerByID(ctx context.Context, id string) (model.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomerByID", ctx, id)
	ret0, _ := ret[0].(model.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomerByID indicates an expected call of CustomerByID.
func (mr *MockRepositoryMockRecorder) CustomerByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerByID", reflect.TypeOf((*MockRepository)(nil).CustomerByID), ctx, id)
}

// CustomerCreate mocks base method.
func (m *MockRepository) CustomerCreate(ctx context.Context, customer model.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomerCreate", ctx, customer)
	ret0, _ := ret[0].(error)
	return ret0
}

// CustomerCreate indicates an expected call of CustomerCreate.
func (mr *MockRepositoryMockRecorder) CustomerCreate(ctx, customer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerCreate", reflect.TypeOf((*MockRepository)(nil).CustomerCreate), ctx, customer)
}

// CustomerUpdate mocks base method.
func (m *MockRepository) CustomerUpdate(ctx context.Context, customer model.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomerUpdate", ctx, customer)
	ret0, _ := ret[0].(error)
	return ret0
}

// CustomerUpdate indicates an expected call of CustomerUpdate.
func (mr *MockRepositoryMockRecorder) CustomerUpdate(ctx, customer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerUpdate", reflect.TypeOf((*MockRepository)(nil).CustomerUpdate), ctx, customer)
}

// CustomerUpdateLocation mocks base method.
func (m *MockRepository) CustomerUpdateLocation(ctx context.Context, id string, lat, lng float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomerUpdateLocation", ctx, id, lat, lng)
	ret0, _ := ret[0].(error)
	return ret0
}

// CustomerUpdateLocation indicates an expected call of CustomerUpdateLocation.
func (mr *MockRepositoryMockRecorder) CustomerUpdateLocation(ctx, id, lat, lng any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerUpdateLocation", reflect.TypeOf((*MockRepository)(nil).CustomerUpdateLocation), ctx, id, lat, lng)
}

// CustomerUpdatePhone mocks base method.
func (m *MockRepository) CustomerUpdatePhone(ctx context.Context, id, phone string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomerUpdatePhone", ctx, id, phone)
	ret0, _ := ret[0].(error)
	return ret0
}

// CustomerUpdatePhone indicates an expected call of CustomerUpdatePhone.
func (mr *MockRepositoryMockRecorder) CustomerUpdatePhone(ctx, id, phone any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerUpdatePhone", reflect.TypeOf((*MockRepository)(nil).CustomerUpdatePhone), ctx, id, phone)
}
