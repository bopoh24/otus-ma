// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source client.go -destination mock/http_requester.go -package mock HttpRequester
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockHttpRequester is a mock of HttpRequester interface.
type MockHttpRequester struct {
	ctrl     *gomock.Controller
	recorder *MockHttpRequesterMockRecorder
}

// MockHttpRequesterMockRecorder is the mock recorder for MockHttpRequester.
type MockHttpRequesterMockRecorder struct {
	mock *MockHttpRequester
}

// NewMockHttpRequester creates a new mock instance.
func NewMockHttpRequester(ctrl *gomock.Controller) *MockHttpRequester {
	mock := &MockHttpRequester{ctrl: ctrl}
	mock.recorder = &MockHttpRequesterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpRequester) EXPECT() *MockHttpRequesterMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockHttpRequester) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockHttpRequesterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockHttpRequester)(nil).Close))
}

// Delete mocks base method.
func (m *MockHttpRequester) Delete(ctx context.Context, endpoint string, header http.Header) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, endpoint, header)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockHttpRequesterMockRecorder) Delete(ctx, endpoint, header any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockHttpRequester)(nil).Delete), ctx, endpoint, header)
}

// Get mocks base method.
func (m *MockHttpRequester) Get(ctx context.Context, endpoint string, header http.Header) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, endpoint, header)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockHttpRequesterMockRecorder) Get(ctx, endpoint, header any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHttpRequester)(nil).Get), ctx, endpoint, header)
}

// Patch mocks base method.
func (m *MockHttpRequester) Patch(ctx context.Context, endpoint string, data any, header http.Header) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Patch", ctx, endpoint, data, header)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockHttpRequesterMockRecorder) Patch(ctx, endpoint, data, header any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockHttpRequester)(nil).Patch), ctx, endpoint, data, header)
}

// Post mocks base method.
func (m *MockHttpRequester) Post(ctx context.Context, endpoint string, data any, header http.Header) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", ctx, endpoint, data, header)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post.
func (mr *MockHttpRequesterMockRecorder) Post(ctx, endpoint, data, header any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockHttpRequester)(nil).Post), ctx, endpoint, data, header)
}

// Put mocks base method.
func (m *MockHttpRequester) Put(ctx context.Context, endpoint string, data any, header http.Header) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, endpoint, data, header)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockHttpRequesterMockRecorder) Put(ctx, endpoint, data, header any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockHttpRequester)(nil).Put), ctx, endpoint, data, header)
}
