// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source service.go -destination ../../mocks/repository.go -package mock Repository
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	model "github.com/bopoh24/ma_1/booking/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Book mocks base method.
func (m *MockRepository) Book(ctx context.Context, offerId int64, customerId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Book", ctx, offerId, customerId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Book indicates an expected call of Book.
func (mr *MockRepositoryMockRecorder) Book(ctx, offerId, customerId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Book", reflect.TypeOf((*MockRepository)(nil).Book), ctx, offerId, customerId)
}

// Close mocks base method.
func (m *MockRepository) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRepositoryMockRecorder) Close(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRepository)(nil).Close), ctx)
}

// CompanyOffers mocks base method.
func (m *MockRepository) CompanyOffers(ctx context.Context, companyId int64, page, limit int) ([]model.Offer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompanyOffers", ctx, companyId, page, limit)
	ret0, _ := ret[0].([]model.Offer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompanyOffers indicates an expected call of CompanyOffers.
func (mr *MockRepositoryMockRecorder) CompanyOffers(ctx, companyId, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompanyOffers", reflect.TypeOf((*MockRepository)(nil).CompanyOffers), ctx, companyId, page, limit)
}

// CustomerOffers mocks base method.
func (m *MockRepository) CustomerOffers(ctx context.Context, customerId string, page, limit int) ([]model.Offer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomerOffers", ctx, customerId, page, limit)
	ret0, _ := ret[0].([]model.Offer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomerOffers indicates an expected call of CustomerOffers.
func (mr *MockRepositoryMockRecorder) CustomerOffers(ctx, customerId, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerOffers", reflect.TypeOf((*MockRepository)(nil).CustomerOffers), ctx, customerId, page, limit)
}

// OfferAdd mocks base method.
func (m *MockRepository) OfferAdd(ctx context.Context, offer model.Offer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OfferAdd", ctx, offer)
	ret0, _ := ret[0].(error)
	return ret0
}

// OfferAdd indicates an expected call of OfferAdd.
func (mr *MockRepositoryMockRecorder) OfferAdd(ctx, offer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfferAdd", reflect.TypeOf((*MockRepository)(nil).OfferAdd), ctx, offer)
}

// OfferCancelByCompany mocks base method.
func (m *MockRepository) OfferCancelByCompany(ctx context.Context, id int64, reason string, companyId int64, managerId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OfferCancelByCompany", ctx, id, reason, companyId, managerId)
	ret0, _ := ret[0].(error)
	return ret0
}

// OfferCancelByCompany indicates an expected call of OfferCancelByCompany.
func (mr *MockRepositoryMockRecorder) OfferCancelByCompany(ctx, id, reason, companyId, managerId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfferCancelByCompany", reflect.TypeOf((*MockRepository)(nil).OfferCancelByCompany), ctx, id, reason, companyId, managerId)
}

// OfferCancelByCustomer mocks base method.
func (m *MockRepository) OfferCancelByCustomer(ctx context.Context, id int64, reason, customerId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OfferCancelByCustomer", ctx, id, reason, customerId)
	ret0, _ := ret[0].(error)
	return ret0
}

// OfferCancelByCustomer indicates an expected call of OfferCancelByCustomer.
func (mr *MockRepositoryMockRecorder) OfferCancelByCustomer(ctx, id, reason, customerId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfferCancelByCustomer", reflect.TypeOf((*MockRepository)(nil).OfferCancelByCustomer), ctx, id, reason, customerId)
}

// OfferChangeStatus mocks base method.
func (m *MockRepository) OfferChangeStatus(ctx context.Context, id int64, status model.OrderStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OfferChangeStatus", ctx, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// OfferChangeStatus indicates an expected call of OfferChangeStatus.
func (mr *MockRepositoryMockRecorder) OfferChangeStatus(ctx, id, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfferChangeStatus", reflect.TypeOf((*MockRepository)(nil).OfferChangeStatus), ctx, id, status)
}

// OfferDelete mocks base method.
func (m *MockRepository) OfferDelete(ctx context.Context, id, companyId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OfferDelete", ctx, id, companyId)
	ret0, _ := ret[0].(error)
	return ret0
}

// OfferDelete indicates an expected call of OfferDelete.
func (mr *MockRepositoryMockRecorder) OfferDelete(ctx, id, companyId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfferDelete", reflect.TypeOf((*MockRepository)(nil).OfferDelete), ctx, id, companyId)
}

// OfferSearch mocks base method.
func (m *MockRepository) OfferSearch(ctx context.Context, serviceId int64, from, to time.Time, page, limit int) ([]model.Offer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OfferSearch", ctx, serviceId, from, to, page, limit)
	ret0, _ := ret[0].([]model.Offer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OfferSearch indicates an expected call of OfferSearch.
func (mr *MockRepositoryMockRecorder) OfferSearch(ctx, serviceId, from, to, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfferSearch", reflect.TypeOf((*MockRepository)(nil).OfferSearch), ctx, serviceId, from, to, page, limit)
}

// ServiceAdd mocks base method.
func (m *MockRepository) ServiceAdd(ctx context.Context, service model.Service) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceAdd", ctx, service)
	ret0, _ := ret[0].(error)
	return ret0
}

// ServiceAdd indicates an expected call of ServiceAdd.
func (mr *MockRepositoryMockRecorder) ServiceAdd(ctx, service any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceAdd", reflect.TypeOf((*MockRepository)(nil).ServiceAdd), ctx, service)
}

// Services mocks base method.
func (m *MockRepository) Services(ctx context.Context) ([]model.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Services", ctx)
	ret0, _ := ret[0].([]model.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Services indicates an expected call of Services.
func (mr *MockRepositoryMockRecorder) Services(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Services", reflect.TypeOf((*MockRepository)(nil).Services), ctx)
}
