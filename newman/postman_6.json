{
	"info": {
		"_postman_id": "4c69d239-c546-4fba-bfcf-fca112048ea5",
		"name": "HW_6",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "3360772",
		"_collection_link": "https://www.postman.com/bopoh24/workspace/otus-ma/collection/3360772-4c69d239-c546-4fba-bfcf-fca112048ea5?action=share&source=collection_link&creator=3360772"
	},
	"item": [
		{
			"name": "Create order without X-Idempotency-Key",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", () => {",
							"  pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"products\": [1, 2, 3],\n  \"payment_method\": \"cash\",\n  \"shipment_type\": \"courier\",\n  \"shipment_addr\": \"{{$randomStreetAddress}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/v1/order",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"order"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create order with X-Idempotency-Key",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"",
							"pm.test(\"Order ID in response\", ()=> {",
							"    pm.expect(jsonData.order_id).exist;",
							"});",
							"",
							"",
							"pm.collectionVariables.set(\"order_id\", jsonData.order_id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Idempotency-Key",
						"value": "1234567892",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"products\": [1, 2, 3],\n  \"payment_method\": \"cash\",\n  \"shipment_type\": \"courier\",\n  \"shipment_addr\": \"Moscow, Tverskaya st., 1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/v1/order",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"order"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create order with same X-Idempotency-Key again",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"",
							"pm.test(\"Order ID in response\", ()=> {",
							"    pm.expect(jsonData.order_id).exist;",
							"});",
							"",
							"",
							"pm.test(\"Order ID is the same\", () => {",
							"    pm.expect(jsonData.order_id).equal(pm.collectionVariables.get(\"order_id\"))",
							"})",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Idempotency-Key",
						"value": "1234567892",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"products\": [1, 2, 3],\n  \"payment_method\": \"cash\",\n  \"shipment_type\": \"courier\",\n  \"shipment_addr\": \"Moscow, Tverskaya st., 1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/v1/order",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"order"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create order with another X-Idempotency-Key",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"",
							"pm.test(\"Order ID in response\", ()=> {",
							"    pm.expect(jsonData.order_id).exist;",
							"});",
							"",
							"",
							"pm.test(\"Order ID is NOT the same\", () => {",
							"    pm.expect(jsonData.order_id).not.equal(pm.collectionVariables.get(\"order_id\"))",
							"})",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Idempotency-Key",
						"value": "{{$randomUUID}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"products\": [5, 7, 8],\n  \"payment_method\": \"cash\",\n  \"shipment_type\": \"courier\",\n  \"shipment_addr\": \"{{$randomStreetAddress}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/v1/order",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"order"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "arch.homework",
			"type": "string"
		},
		{
			"key": "order_id",
			"value": ""
		}
	]
}
